package topscorer;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

public class FileManager {
	private Path dataDirectoryPath;
	private String dataDirectory;
	private String inputFilename;
	private String outputFilename;
	private File inputeFile;
	private int lineNumber = 0;
	private Scanner reader;
	private FileWriter writer;

	public FileManager(String inputFilename, String outputFilename, String dataDirectory) {
		this.inputFilename = inputFilename;
		this.outputFilename = outputFilename;
		this.dataDirectory = dataDirectory;
		setDataDirectoryPath();
		setInputeFile();
	}

	public void setDataDirectoryPath() {
		try {
			this.dataDirectoryPath = Paths.get(this.dataDirectory);
			Files.createDirectory(this.dataDirectoryPath);
		} catch (FileAlreadyExistsException fae) {
			System.out.println("Directory already exists!");
		} catch (IOException ioe) {
			System.out.println("Encouted a problem while trying to access " + this.dataDirectory);
			System.exit(-1);
		}
	}

	public void setInputeFile() {
		Path path = Paths.get(dataDirectory,
				this.inputFilename.endsWith(".cvs") ? this.inputFilename : this.inputFilename+".csv");
		this.inputeFile = path.toFile();
		try {
			this.reader = new Scanner(inputeFile);
			validateIfTheFileIsCSV();
		} catch (IncorrectCSVFormat icsve) {
			System.out.println("Incorrect headings on the \"" + this.inputFilename + "\" csv file!");
			System.exit(-1);
		} catch (FileNotFoundException e) {
			System.out.println("Input file \"" + this.inputFilename + "\" does not exist!");
			System.exit(-1);
		}
	}

	private void validateIfTheFileIsCSV() throws FileNotFoundException, IncorrectCSVFormat {
		if (!this.inputFilename.endsWith(".csv")) {
			throw new FileNotFoundException();
		} else if (!this.reader.nextLine().contentEquals("name,surname,score")) {
			throw new IncorrectCSVFormat();
		}

	}

	public void writeToOutputFile(Student student, boolean append) {
		Path path = Paths.get(dataDirectory, outputFilename);
		try {
			if (append) {
				this.writer = new FileWriter(path.toFile(), true);
				this.writer.write(student.toString() + "\n");
				this.writer.close();
			} else {
				if (Files.exists(path)) {
					Files.delete(path);
				}
				this.writer = new FileWriter(path.toFile(), true);
				this.writer.write(student.toString() + "\n");
				this.writer.close();
			}

		} catch (IOException ioe) {
			System.out.println("Could not access " + this.outputFilename);
			System.exit(-1);
		}
	}

	public Student readALineFromInputFile() {
		String[] line = new String[3];
		Student student = null;
		if (this.reader.hasNext()) {
			lineNumber++;
			line = this.reader.nextLine().split(",");
			try {
				validateEntry(line);
				student = new Student(line[0].strip(), line[1].strip(), Integer.parseInt(line[2].strip()));
			} catch (IncorrectStudentRecord e) {
				System.out.println("Invalid Student entry at line " + lineNumber);
			}
		} else {
			line = null;
			student = null;
			this.reader.close();
		}
		return student;

	}

	private void validateEntry(String[] line) throws IncorrectStudentRecord {
		if (line.length == 3) {
			for (String s : line) {
				if (s == null || s.isBlank())
					throw new IncorrectStudentRecord();
			}
		} else {
			throw new IncorrectStudentRecord();
		}
		try {
			Integer.parseInt(line[2].strip());
		} catch (NumberFormatException nfe) {
			throw new IncorrectStudentRecord();
		}
	}

}
